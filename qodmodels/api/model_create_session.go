/*
QoD for enhanced communication

Service Enabling Network Function API for QoS control

API version: 0.8.0
Contact: project-email@sample.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CreateSession Data type with attributes required for creating a session
type CreateSession struct {
	// Session duration in seconds. Maximal value of 24 hours is used if not set. After session has expired the client will receive SESSION_TERMINATED event. See notification callback. 
	Duration *int32 `json:"duration,omitempty" bson:"duration,omitempty"`
	UeId UeId `json:"ueId" bson:"ueId"`
	AsId AsId `json:"asId" bson:"asId"`
	UePorts *PortsSpec `json:"uePorts,omitempty" bson:"uePorts,omitempty"`
	AsPorts *PortsSpec `json:"asPorts,omitempty" bson:"asPorts,omitempty"`
	Qos QosProfile `json:"qos" bson:"qos"`
	// Allows asynchronous delivery of session related events
	NotificationUri *string `json:"notificationUri,omitempty" bson:"notificationUri,omitempty"`
	// Authentification token for callback API
	NotificationAuthToken *string `json:"notificationAuthToken,omitempty" bson:"notificationAuthToken,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateSession CreateSession

// NewCreateSession instantiates a new CreateSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSession(ueId UeId, asId AsId, qos QosProfile) *CreateSession {
	this := CreateSession{}
	var duration int32 = 86400
	this.Duration = &duration
	this.UeId = ueId
	this.AsId = asId
	this.Qos = qos
	return &this
}

// NewCreateSessionWithDefaults instantiates a new CreateSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSessionWithDefaults() *CreateSession {
	this := CreateSession{}
	var duration int32 = 86400
	this.Duration = &duration
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *CreateSession) GetDuration() int32 {
	if o == nil || isNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSession) GetDurationOk() (*int32, bool) {
	if o == nil || isNil(o.Duration) {
    return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *CreateSession) HasDuration() bool {
	if o != nil && !isNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *CreateSession) SetDuration(v int32) {
	o.Duration = &v
}

// GetUeId returns the UeId field value
func (o *CreateSession) GetUeId() UeId {
	if o == nil {
		var ret UeId
		return ret
	}

	return o.UeId
}

// GetUeIdOk returns a tuple with the UeId field value
// and a boolean to check if the value has been set.
func (o *CreateSession) GetUeIdOk() (*UeId, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UeId, true
}

// SetUeId sets field value
func (o *CreateSession) SetUeId(v UeId) {
	o.UeId = v
}

// GetAsId returns the AsId field value
func (o *CreateSession) GetAsId() AsId {
	if o == nil {
		var ret AsId
		return ret
	}

	return o.AsId
}

// GetAsIdOk returns a tuple with the AsId field value
// and a boolean to check if the value has been set.
func (o *CreateSession) GetAsIdOk() (*AsId, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AsId, true
}

// SetAsId sets field value
func (o *CreateSession) SetAsId(v AsId) {
	o.AsId = v
}

// GetUePorts returns the UePorts field value if set, zero value otherwise.
func (o *CreateSession) GetUePorts() PortsSpec {
	if o == nil || isNil(o.UePorts) {
		var ret PortsSpec
		return ret
	}
	return *o.UePorts
}

// GetUePortsOk returns a tuple with the UePorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSession) GetUePortsOk() (*PortsSpec, bool) {
	if o == nil || isNil(o.UePorts) {
    return nil, false
	}
	return o.UePorts, true
}

// HasUePorts returns a boolean if a field has been set.
func (o *CreateSession) HasUePorts() bool {
	if o != nil && !isNil(o.UePorts) {
		return true
	}

	return false
}

// SetUePorts gets a reference to the given PortsSpec and assigns it to the UePorts field.
func (o *CreateSession) SetUePorts(v PortsSpec) {
	o.UePorts = &v
}

// GetAsPorts returns the AsPorts field value if set, zero value otherwise.
func (o *CreateSession) GetAsPorts() PortsSpec {
	if o == nil || isNil(o.AsPorts) {
		var ret PortsSpec
		return ret
	}
	return *o.AsPorts
}

// GetAsPortsOk returns a tuple with the AsPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSession) GetAsPortsOk() (*PortsSpec, bool) {
	if o == nil || isNil(o.AsPorts) {
    return nil, false
	}
	return o.AsPorts, true
}

// HasAsPorts returns a boolean if a field has been set.
func (o *CreateSession) HasAsPorts() bool {
	if o != nil && !isNil(o.AsPorts) {
		return true
	}

	return false
}

// SetAsPorts gets a reference to the given PortsSpec and assigns it to the AsPorts field.
func (o *CreateSession) SetAsPorts(v PortsSpec) {
	o.AsPorts = &v
}

// GetQos returns the Qos field value
func (o *CreateSession) GetQos() QosProfile {
	if o == nil {
		var ret QosProfile
		return ret
	}

	return o.Qos
}

// GetQosOk returns a tuple with the Qos field value
// and a boolean to check if the value has been set.
func (o *CreateSession) GetQosOk() (*QosProfile, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Qos, true
}

// SetQos sets field value
func (o *CreateSession) SetQos(v QosProfile) {
	o.Qos = v
}

// GetNotificationUri returns the NotificationUri field value if set, zero value otherwise.
func (o *CreateSession) GetNotificationUri() string {
	if o == nil || isNil(o.NotificationUri) {
		var ret string
		return ret
	}
	return *o.NotificationUri
}

// GetNotificationUriOk returns a tuple with the NotificationUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSession) GetNotificationUriOk() (*string, bool) {
	if o == nil || isNil(o.NotificationUri) {
    return nil, false
	}
	return o.NotificationUri, true
}

// HasNotificationUri returns a boolean if a field has been set.
func (o *CreateSession) HasNotificationUri() bool {
	if o != nil && !isNil(o.NotificationUri) {
		return true
	}

	return false
}

// SetNotificationUri gets a reference to the given string and assigns it to the NotificationUri field.
func (o *CreateSession) SetNotificationUri(v string) {
	o.NotificationUri = &v
}

// GetNotificationAuthToken returns the NotificationAuthToken field value if set, zero value otherwise.
func (o *CreateSession) GetNotificationAuthToken() string {
	if o == nil || isNil(o.NotificationAuthToken) {
		var ret string
		return ret
	}
	return *o.NotificationAuthToken
}

// GetNotificationAuthTokenOk returns a tuple with the NotificationAuthToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSession) GetNotificationAuthTokenOk() (*string, bool) {
	if o == nil || isNil(o.NotificationAuthToken) {
    return nil, false
	}
	return o.NotificationAuthToken, true
}

// HasNotificationAuthToken returns a boolean if a field has been set.
func (o *CreateSession) HasNotificationAuthToken() bool {
	if o != nil && !isNil(o.NotificationAuthToken) {
		return true
	}

	return false
}

// SetNotificationAuthToken gets a reference to the given string and assigns it to the NotificationAuthToken field.
func (o *CreateSession) SetNotificationAuthToken(v string) {
	o.NotificationAuthToken = &v
}

func (o CreateSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if true {
		toSerialize["ueId"] = o.UeId
	}
	if true {
		toSerialize["asId"] = o.AsId
	}
	if !isNil(o.UePorts) {
		toSerialize["uePorts"] = o.UePorts
	}
	if !isNil(o.AsPorts) {
		toSerialize["asPorts"] = o.AsPorts
	}
	if true {
		toSerialize["qos"] = o.Qos
	}
	if !isNil(o.NotificationUri) {
		toSerialize["notificationUri"] = o.NotificationUri
	}
	if !isNil(o.NotificationAuthToken) {
		toSerialize["notificationAuthToken"] = o.NotificationAuthToken
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateSession) UnmarshalJSON(bytes []byte) (err error) {
	varCreateSession := _CreateSession{}

	if err = json.Unmarshal(bytes, &varCreateSession); err == nil {
		*o = CreateSession(varCreateSession)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "duration")
		delete(additionalProperties, "ueId")
		delete(additionalProperties, "asId")
		delete(additionalProperties, "uePorts")
		delete(additionalProperties, "asPorts")
		delete(additionalProperties, "qos")
		delete(additionalProperties, "notificationUri")
		delete(additionalProperties, "notificationAuthToken")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateSession struct {
	value *CreateSession
	isSet bool
}

func (v NullableCreateSession) Get() *CreateSession {
	return v.value
}

func (v *NullableCreateSession) Set(val *CreateSession) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSession) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSession(val *CreateSession) *NullableCreateSession {
	return &NullableCreateSession{value: val, isSet: true}
}

func (v NullableCreateSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


