/*
QoD for enhanced communication

Service Enabling Network Function API for QoS control

API version: 0.8.0
Contact: project-email@sample.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SessionEvent the model 'SessionEvent'
type SessionEvent string

// List of SessionEvent
const (
	SESSION_TERMINATED SessionEvent = "SESSION_TERMINATED"
)

// All allowed values of SessionEvent enum
var AllowedSessionEventEnumValues = []SessionEvent{
	"SESSION_TERMINATED",
}

func (v *SessionEvent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionEvent(value)
	for _, existing := range AllowedSessionEventEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionEvent", value)
}

// NewSessionEventFromValue returns a pointer to a valid SessionEvent
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionEventFromValue(v string) (*SessionEvent, error) {
	ev := SessionEvent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SessionEvent: valid values are %v", v, AllowedSessionEventEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionEvent) IsValid() bool {
	for _, existing := range AllowedSessionEventEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SessionEvent value
func (v SessionEvent) Ptr() *SessionEvent {
	return &v
}

type NullableSessionEvent struct {
	value *SessionEvent
	isSet bool
}

func (v NullableSessionEvent) Get() *SessionEvent {
	return v.value
}

func (v *NullableSessionEvent) Set(val *SessionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionEvent(val *SessionEvent) *NullableSessionEvent {
	return &NullableSessionEvent{value: val, isSet: true}
}

func (v NullableSessionEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

