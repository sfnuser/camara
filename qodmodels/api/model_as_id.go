/*
QoD for enhanced communication

Service Enabling Network Function API for QoS control

API version: 0.8.0
Contact: project-email@sample.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AsId Application server identifier
type AsId struct {
	// IPv4 address may be specified in form <address/mask> as:   - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.   - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.     In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version. 
	Ipv4addr *string `json:"ipv4addr,omitempty" bson:"ipv4addr,omitempty"`
	Ipv6addr *Ipv6Addr `json:"ipv6addr,omitempty" bson:"ipv6addr,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AsId AsId

// NewAsId instantiates a new AsId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsId() *AsId {
	this := AsId{}
	return &this
}

// NewAsIdWithDefaults instantiates a new AsId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsIdWithDefaults() *AsId {
	this := AsId{}
	return &this
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *AsId) GetIpv4addr() string {
	if o == nil || isNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsId) GetIpv4addrOk() (*string, bool) {
	if o == nil || isNil(o.Ipv4addr) {
    return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *AsId) HasIpv4addr() bool {
	if o != nil && !isNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *AsId) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

// GetIpv6addr returns the Ipv6addr field value if set, zero value otherwise.
func (o *AsId) GetIpv6addr() Ipv6Addr {
	if o == nil || isNil(o.Ipv6addr) {
		var ret Ipv6Addr
		return ret
	}
	return *o.Ipv6addr
}

// GetIpv6addrOk returns a tuple with the Ipv6addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsId) GetIpv6addrOk() (*Ipv6Addr, bool) {
	if o == nil || isNil(o.Ipv6addr) {
    return nil, false
	}
	return o.Ipv6addr, true
}

// HasIpv6addr returns a boolean if a field has been set.
func (o *AsId) HasIpv6addr() bool {
	if o != nil && !isNil(o.Ipv6addr) {
		return true
	}

	return false
}

// SetIpv6addr gets a reference to the given Ipv6Addr and assigns it to the Ipv6addr field.
func (o *AsId) SetIpv6addr(v Ipv6Addr) {
	o.Ipv6addr = &v
}

func (o AsId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !isNil(o.Ipv6addr) {
		toSerialize["ipv6addr"] = o.Ipv6addr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AsId) UnmarshalJSON(bytes []byte) (err error) {
	varAsId := _AsId{}

	if err = json.Unmarshal(bytes, &varAsId); err == nil {
		*o = AsId(varAsId)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ipv4addr")
		delete(additionalProperties, "ipv6addr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAsId struct {
	value *AsId
	isSet bool
}

func (v NullableAsId) Get() *AsId {
	return v.value
}

func (v *NullableAsId) Set(val *AsId) {
	v.value = val
	v.isSet = true
}

func (v NullableAsId) IsSet() bool {
	return v.isSet
}

func (v *NullableAsId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsId(val *AsId) *NullableAsId {
	return &NullableAsId{value: val, isSet: true}
}

func (v NullableAsId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


