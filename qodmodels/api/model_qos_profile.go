/*
QoD for enhanced communication

Service Enabling Network Function API for QoS control

API version: 0.8.0
Contact: project-email@sample.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// QosProfile * `QOS_E` - Qualifier for enhanced communication profile * `QOS_S` - Qualifier for the requested QoS profile _S_ * `QOS_M` - Qualifier for the requested QoS profile _M_ * `QOS_L` - Qualifier for the requested QoS profile _L_ 
type QosProfile string

// List of QosProfile
const (
	E QosProfile = "QOS_E"
	S QosProfile = "QOS_S"
	M QosProfile = "QOS_M"
	L QosProfile = "QOS_L"
)

// All allowed values of QosProfile enum
var AllowedQosProfileEnumValues = []QosProfile{
	"QOS_E",
	"QOS_S",
	"QOS_M",
	"QOS_L",
}

func (v *QosProfile) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QosProfile(value)
	for _, existing := range AllowedQosProfileEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QosProfile", value)
}

// NewQosProfileFromValue returns a pointer to a valid QosProfile
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQosProfileFromValue(v string) (*QosProfile, error) {
	ev := QosProfile(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QosProfile: valid values are %v", v, AllowedQosProfileEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QosProfile) IsValid() bool {
	for _, existing := range AllowedQosProfileEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QosProfile value
func (v QosProfile) Ptr() *QosProfile {
	return &v
}

type NullableQosProfile struct {
	value *QosProfile
	isSet bool
}

func (v NullableQosProfile) Get() *QosProfile {
	return v.value
}

func (v *NullableQosProfile) Set(val *QosProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableQosProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableQosProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQosProfile(val *QosProfile) *NullableQosProfile {
	return &NullableQosProfile{value: val, isSet: true}
}

func (v NullableQosProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQosProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

