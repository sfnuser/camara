/*
QoD for enhanced communication

Service Enabling Network Function API for QoS control

API version: 0.8.0
Contact: project-email@sample.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UeId User equipment identifier
type UeId struct {
	ExternalId *string `json:"externalId,omitempty" bson:"externalId,omitempty"`
	// Subscriber number in E.164 format (starting with country code). Optionally prefixed with '+'.
	Msisdn *string `json:"msisdn,omitempty" bson:"msisdn,omitempty"`
	// IPv4 address may be specified in form <address/mask> as:   - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.   - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.     In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version. 
	Ipv4addr *string `json:"ipv4addr,omitempty" bson:"ipv4addr,omitempty"`
	Ipv6addr *Ipv6Addr `json:"ipv6addr,omitempty" bson:"ipv6addr,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UeId UeId

// NewUeId instantiates a new UeId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeId() *UeId {
	this := UeId{}
	return &this
}

// NewUeIdWithDefaults instantiates a new UeId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeIdWithDefaults() *UeId {
	this := UeId{}
	return &this
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *UeId) GetExternalId() string {
	if o == nil || isNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeId) GetExternalIdOk() (*string, bool) {
	if o == nil || isNil(o.ExternalId) {
    return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *UeId) HasExternalId() bool {
	if o != nil && !isNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *UeId) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetMsisdn returns the Msisdn field value if set, zero value otherwise.
func (o *UeId) GetMsisdn() string {
	if o == nil || isNil(o.Msisdn) {
		var ret string
		return ret
	}
	return *o.Msisdn
}

// GetMsisdnOk returns a tuple with the Msisdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeId) GetMsisdnOk() (*string, bool) {
	if o == nil || isNil(o.Msisdn) {
    return nil, false
	}
	return o.Msisdn, true
}

// HasMsisdn returns a boolean if a field has been set.
func (o *UeId) HasMsisdn() bool {
	if o != nil && !isNil(o.Msisdn) {
		return true
	}

	return false
}

// SetMsisdn gets a reference to the given string and assigns it to the Msisdn field.
func (o *UeId) SetMsisdn(v string) {
	o.Msisdn = &v
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *UeId) GetIpv4addr() string {
	if o == nil || isNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeId) GetIpv4addrOk() (*string, bool) {
	if o == nil || isNil(o.Ipv4addr) {
    return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *UeId) HasIpv4addr() bool {
	if o != nil && !isNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *UeId) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

// GetIpv6addr returns the Ipv6addr field value if set, zero value otherwise.
func (o *UeId) GetIpv6addr() Ipv6Addr {
	if o == nil || isNil(o.Ipv6addr) {
		var ret Ipv6Addr
		return ret
	}
	return *o.Ipv6addr
}

// GetIpv6addrOk returns a tuple with the Ipv6addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeId) GetIpv6addrOk() (*Ipv6Addr, bool) {
	if o == nil || isNil(o.Ipv6addr) {
    return nil, false
	}
	return o.Ipv6addr, true
}

// HasIpv6addr returns a boolean if a field has been set.
func (o *UeId) HasIpv6addr() bool {
	if o != nil && !isNil(o.Ipv6addr) {
		return true
	}

	return false
}

// SetIpv6addr gets a reference to the given Ipv6Addr and assigns it to the Ipv6addr field.
func (o *UeId) SetIpv6addr(v Ipv6Addr) {
	o.Ipv6addr = &v
}

func (o UeId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !isNil(o.Msisdn) {
		toSerialize["msisdn"] = o.Msisdn
	}
	if !isNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}
	if !isNil(o.Ipv6addr) {
		toSerialize["ipv6addr"] = o.Ipv6addr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UeId) UnmarshalJSON(bytes []byte) (err error) {
	varUeId := _UeId{}

	if err = json.Unmarshal(bytes, &varUeId); err == nil {
		*o = UeId(varUeId)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "msisdn")
		delete(additionalProperties, "ipv4addr")
		delete(additionalProperties, "ipv6addr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUeId struct {
	value *UeId
	isSet bool
}

func (v NullableUeId) Get() *UeId {
	return v.value
}

func (v *NullableUeId) Set(val *UeId) {
	v.value = val
	v.isSet = true
}

func (v NullableUeId) IsSet() bool {
	return v.isSet
}

func (v *NullableUeId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeId(val *UeId) *NullableUeId {
	return &NullableUeId{value: val, isSet: true}
}

func (v NullableUeId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


